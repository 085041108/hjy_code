/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HjyService_H
#define HjyService_H

#include <thrift/TDispatchProcessor.h>
#include "HjyService_types.h"



class HjyServiceIf {
 public:
  virtual ~HjyServiceIf() {}
  virtual void call(hjy_respose& _return, const hjy_request& req) = 0;
};

class HjyServiceIfFactory {
 public:
  typedef HjyServiceIf Handler;

  virtual ~HjyServiceIfFactory() {}

  virtual HjyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HjyServiceIf* /* handler */) = 0;
};

class HjyServiceIfSingletonFactory : virtual public HjyServiceIfFactory {
 public:
  HjyServiceIfSingletonFactory(const boost::shared_ptr<HjyServiceIf>& iface) : iface_(iface) {}
  virtual ~HjyServiceIfSingletonFactory() {}

  virtual HjyServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HjyServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<HjyServiceIf> iface_;
};

class HjyServiceNull : virtual public HjyServiceIf {
 public:
  virtual ~HjyServiceNull() {}
  void call(hjy_respose& /* _return */, const hjy_request& /* req */) {
    return;
  }
};

typedef struct _HjyService_call_args__isset {
  _HjyService_call_args__isset() : req(false) {}
  bool req :1;
} _HjyService_call_args__isset;

class HjyService_call_args {
 public:

  static const char* ascii_fingerprint; // = "1F76F44D6532891ACC9850653E4D2692";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x76,0xF4,0x4D,0x65,0x32,0x89,0x1A,0xCC,0x98,0x50,0x65,0x3E,0x4D,0x26,0x92};

  HjyService_call_args(const HjyService_call_args&);
  HjyService_call_args& operator=(const HjyService_call_args&);
  HjyService_call_args() {
  }

  virtual ~HjyService_call_args() throw();
  hjy_request req;

  _HjyService_call_args__isset __isset;

  void __set_req(const hjy_request& val);

  bool operator == (const HjyService_call_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const HjyService_call_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HjyService_call_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HjyService_call_args& obj);
};


class HjyService_call_pargs {
 public:

  static const char* ascii_fingerprint; // = "1F76F44D6532891ACC9850653E4D2692";
  static const uint8_t binary_fingerprint[16]; // = {0x1F,0x76,0xF4,0x4D,0x65,0x32,0x89,0x1A,0xCC,0x98,0x50,0x65,0x3E,0x4D,0x26,0x92};


  virtual ~HjyService_call_pargs() throw();
  const hjy_request* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HjyService_call_pargs& obj);
};

typedef struct _HjyService_call_result__isset {
  _HjyService_call_result__isset() : success(false) {}
  bool success :1;
} _HjyService_call_result__isset;

class HjyService_call_result {
 public:

  static const char* ascii_fingerprint; // = "DA5D6DFF6224805C74886C37F734AA83";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x5D,0x6D,0xFF,0x62,0x24,0x80,0x5C,0x74,0x88,0x6C,0x37,0xF7,0x34,0xAA,0x83};

  HjyService_call_result(const HjyService_call_result&);
  HjyService_call_result& operator=(const HjyService_call_result&);
  HjyService_call_result() {
  }

  virtual ~HjyService_call_result() throw();
  hjy_respose success;

  _HjyService_call_result__isset __isset;

  void __set_success(const hjy_respose& val);

  bool operator == (const HjyService_call_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HjyService_call_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HjyService_call_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HjyService_call_result& obj);
};

typedef struct _HjyService_call_presult__isset {
  _HjyService_call_presult__isset() : success(false) {}
  bool success :1;
} _HjyService_call_presult__isset;

class HjyService_call_presult {
 public:

  static const char* ascii_fingerprint; // = "DA5D6DFF6224805C74886C37F734AA83";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0x5D,0x6D,0xFF,0x62,0x24,0x80,0x5C,0x74,0x88,0x6C,0x37,0xF7,0x34,0xAA,0x83};


  virtual ~HjyService_call_presult() throw();
  hjy_respose* success;

  _HjyService_call_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HjyService_call_presult& obj);
};

class HjyServiceClient : virtual public HjyServiceIf {
 public:
  HjyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HjyServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void call(hjy_respose& _return, const hjy_request& req);
  void send_call(const hjy_request& req);
  void recv_call(hjy_respose& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HjyServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HjyServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HjyServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_call(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HjyServiceProcessor(boost::shared_ptr<HjyServiceIf> iface) :
    iface_(iface) {
    processMap_["call"] = &HjyServiceProcessor::process_call;
  }

  virtual ~HjyServiceProcessor() {}
};

class HjyServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HjyServiceProcessorFactory(const ::boost::shared_ptr< HjyServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HjyServiceIfFactory > handlerFactory_;
};

class HjyServiceMultiface : virtual public HjyServiceIf {
 public:
  HjyServiceMultiface(std::vector<boost::shared_ptr<HjyServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HjyServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HjyServiceIf> > ifaces_;
  HjyServiceMultiface() {}
  void add(boost::shared_ptr<HjyServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void call(hjy_respose& _return, const hjy_request& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->call(_return, req);
    }
    ifaces_[i]->call(_return, req);
    return;
  }

};



#endif
