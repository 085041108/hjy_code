/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "HjyService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




hjy_request::~hjy_request() throw() {
}


void hjy_request::__set_api(const int32_t val) {
  this->api = val;
}

void hjy_request::__set_logid(const int64_t val) {
  this->logid = val;
}

void hjy_request::__set_req_string(const std::string& val) {
  this->req_string = val;
}

const char* hjy_request::ascii_fingerprint = "A260D3573D95B3BD751F6453CCF5CDF7";
const uint8_t hjy_request::binary_fingerprint[16] = {0xA2,0x60,0xD3,0x57,0x3D,0x95,0xB3,0xBD,0x75,0x1F,0x64,0x53,0xCC,0xF5,0xCD,0xF7};

uint32_t hjy_request::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->api);
          this->__isset.api = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->logid);
          this->__isset.logid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->req_string);
          this->__isset.req_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t hjy_request::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("hjy_request");

  xfer += oprot->writeFieldBegin("api", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->api);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logid", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->logid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("req_string", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->req_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(hjy_request &a, hjy_request &b) {
  using ::std::swap;
  swap(a.api, b.api);
  swap(a.logid, b.logid);
  swap(a.req_string, b.req_string);
  swap(a.__isset, b.__isset);
}

hjy_request::hjy_request(const hjy_request& other0) {
  api = other0.api;
  logid = other0.logid;
  req_string = other0.req_string;
  __isset = other0.__isset;
}
hjy_request& hjy_request::operator=(const hjy_request& other1) {
  api = other1.api;
  logid = other1.logid;
  req_string = other1.req_string;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const hjy_request& obj) {
  using apache::thrift::to_string;
  out << "hjy_request(";
  out << "api=" << to_string(obj.api);
  out << ", " << "logid=" << to_string(obj.logid);
  out << ", " << "req_string=" << to_string(obj.req_string);
  out << ")";
  return out;
}


hjy_respose::~hjy_respose() throw() {
}


void hjy_respose::__set_ret(const int16_t val) {
  this->ret = val;
}

void hjy_respose::__set_res_string(const std::string& val) {
  this->res_string = val;
}

const char* hjy_respose::ascii_fingerprint = "15896F1A4438B1ECBB80CEA66AD0C4C5";
const uint8_t hjy_respose::binary_fingerprint[16] = {0x15,0x89,0x6F,0x1A,0x44,0x38,0xB1,0xEC,0xBB,0x80,0xCE,0xA6,0x6A,0xD0,0xC4,0xC5};

uint32_t hjy_respose::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->res_string);
          this->__isset.res_string = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t hjy_respose::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("hjy_respose");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("res_string", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->res_string);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(hjy_respose &a, hjy_respose &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.res_string, b.res_string);
  swap(a.__isset, b.__isset);
}

hjy_respose::hjy_respose(const hjy_respose& other2) {
  ret = other2.ret;
  res_string = other2.res_string;
  __isset = other2.__isset;
}
hjy_respose& hjy_respose::operator=(const hjy_respose& other3) {
  ret = other3.ret;
  res_string = other3.res_string;
  __isset = other3.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const hjy_respose& obj) {
  using apache::thrift::to_string;
  out << "hjy_respose(";
  out << "ret=" << to_string(obj.ret);
  out << ", " << "res_string=" << to_string(obj.res_string);
  out << ")";
  return out;
}


