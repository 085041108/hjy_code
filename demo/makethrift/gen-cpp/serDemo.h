/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef serDemo_H
#define serDemo_H

#include <thrift/TDispatchProcessor.h>
#include "server_types.h"



class serDemoIf {
 public:
  virtual ~serDemoIf() {}
  virtual void put(const message& msg) = 0;
};

class serDemoIfFactory {
 public:
  typedef serDemoIf Handler;

  virtual ~serDemoIfFactory() {}

  virtual serDemoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(serDemoIf* /* handler */) = 0;
};

class serDemoIfSingletonFactory : virtual public serDemoIfFactory {
 public:
  serDemoIfSingletonFactory(const boost::shared_ptr<serDemoIf>& iface) : iface_(iface) {}
  virtual ~serDemoIfSingletonFactory() {}

  virtual serDemoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(serDemoIf* /* handler */) {}

 protected:
  boost::shared_ptr<serDemoIf> iface_;
};

class serDemoNull : virtual public serDemoIf {
 public:
  virtual ~serDemoNull() {}
  void put(const message& /* msg */) {
    return;
  }
};

typedef struct _serDemo_put_args__isset {
  _serDemo_put_args__isset() : msg(false) {}
  bool msg :1;
} _serDemo_put_args__isset;

class serDemo_put_args {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};

  serDemo_put_args(const serDemo_put_args&);
  serDemo_put_args& operator=(const serDemo_put_args&);
  serDemo_put_args() {
  }

  virtual ~serDemo_put_args() throw();
  message msg;

  _serDemo_put_args__isset __isset;

  void __set_msg(const message& val);

  bool operator == (const serDemo_put_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const serDemo_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const serDemo_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const serDemo_put_args& obj);
};


class serDemo_put_pargs {
 public:

  static const char* ascii_fingerprint; // = "0A23AF95FD017F7C6C78570E7E17112A";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x23,0xAF,0x95,0xFD,0x01,0x7F,0x7C,0x6C,0x78,0x57,0x0E,0x7E,0x17,0x11,0x2A};


  virtual ~serDemo_put_pargs() throw();
  const message* msg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const serDemo_put_pargs& obj);
};


class serDemo_put_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  serDemo_put_result(const serDemo_put_result&);
  serDemo_put_result& operator=(const serDemo_put_result&);
  serDemo_put_result() {
  }

  virtual ~serDemo_put_result() throw();

  bool operator == (const serDemo_put_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const serDemo_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const serDemo_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const serDemo_put_result& obj);
};


class serDemo_put_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~serDemo_put_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const serDemo_put_presult& obj);
};

class serDemoClient : virtual public serDemoIf {
 public:
  serDemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  serDemoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void put(const message& msg);
  void send_put(const message& msg);
  void recv_put();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class serDemoProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<serDemoIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (serDemoProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  serDemoProcessor(boost::shared_ptr<serDemoIf> iface) :
    iface_(iface) {
    processMap_["put"] = &serDemoProcessor::process_put;
  }

  virtual ~serDemoProcessor() {}
};

class serDemoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  serDemoProcessorFactory(const ::boost::shared_ptr< serDemoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< serDemoIfFactory > handlerFactory_;
};

class serDemoMultiface : virtual public serDemoIf {
 public:
  serDemoMultiface(std::vector<boost::shared_ptr<serDemoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~serDemoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<serDemoIf> > ifaces_;
  serDemoMultiface() {}
  void add(boost::shared_ptr<serDemoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const message& msg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(msg);
    }
    ifaces_[i]->put(msg);
  }

};



#endif
