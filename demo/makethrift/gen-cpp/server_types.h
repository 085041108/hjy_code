/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef server_TYPES_H
#define server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class message;

typedef struct _message__isset {
  _message__isset() : seqId(false), content(false) {}
  bool seqId :1;
  bool content :1;
} _message__isset;

class message {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  message(const message&);
  message& operator=(const message&);
  message() : seqId(0), content() {
  }

  virtual ~message() throw();
  int32_t seqId;
  std::string content;

  _message__isset __isset;

  void __set_seqId(const int32_t val);

  void __set_content(const std::string& val);

  bool operator == (const message & rhs) const
  {
    if (!(seqId == rhs.seqId))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const message &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const message & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const message& obj);
};

void swap(message &a, message &b);



#endif
