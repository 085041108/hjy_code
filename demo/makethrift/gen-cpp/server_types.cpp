/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "server_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




message::~message() throw() {
}


void message::__set_seqId(const int32_t val) {
  this->seqId = val;
}

void message::__set_content(const std::string& val) {
  this->content = val;
}

const char* message::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t message::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t message::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seqId);
          this->__isset.seqId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t message::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("message");

  xfer += oprot->writeFieldBegin("seqId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->seqId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(message &a, message &b) {
  using ::std::swap;
  swap(a.seqId, b.seqId);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

message::message(const message& other0) {
  seqId = other0.seqId;
  content = other0.content;
  __isset = other0.__isset;
}
message& message::operator=(const message& other1) {
  seqId = other1.seqId;
  content = other1.content;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const message& obj) {
  using apache::thrift::to_string;
  out << "message(";
  out << "seqId=" << to_string(obj.seqId);
  out << ", " << "content=" << to_string(obj.content);
  out << ")";
  return out;
}


